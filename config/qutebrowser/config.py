#TODO
# figure out how to sending link to mpv or torrents
# terminal intergration


# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

import os
import re
import sys
from qutebrowser.config.configfiles import ConfigAPI  # noqa: F401,E501 pylint: disable=unused-import
from qutebrowser.config.config import ConfigContainer  # noqa: F401,E501 pylint: disable=unused-import
from qutebrowser.api import interceptor
config = config  # type: ConfigAPI # noqa: F821 pylint: disable=E0602,C0103
c = c  # type: ConfigContainer # noqa: F821 pylint: disable=E0602,C0103

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')


# * Helper Functions
def bind(key, command, mode):  # noqa: E302
    """Bind key to command in mode."""
    # TODO set force; doesn't exist yet
    config.bind(key, command, mode=mode)


def nmap(key, command):
    """Bind key to command in normal mode."""
    bind(key, command, 'normal')


def imap(key, command):
    """Bind key to command in insert mode."""
    bind(key, command, 'insert')


def cmap(key, command):
    """Bind key to command in command mode."""
    bind(key, command, 'command')


# def cimap(key, command):
#     """Bind key to command in command mode and insert mode."""
#     cmap(key, command)
#     imap(key, command)


def tmap(key, command):
    """Bind key to command in caret mode."""
    bind(key, command, 'caret')


def pmap(key, command):
    """Bind key to command in passthrough mode."""
    bind(key, command, 'passthrough')


def unmap(key, mode):
    """Unbind key in mode."""
    config.unbind(key, mode=mode)


def nunmap(key):
    """Unbind key in normal mode."""
    unmap(key, mode='normal')


# * Settings
# ** Session
# always restore opened sites when opening qutebrowser
c.auto_save.session = True
c.session.lazy_restore = True

# ** Command Aliases
c.aliases['xa'] = 'quit --save'
c.aliases['h'] = 'help'

# lower delay for keyhint dialog (comparable to which-key)
c.keyhint.delay = 250

# ** Downloads
c.downloads.location.directory = '~/burner_files/'
c.downloads.location.prompt = True
c.downloads.open_dispatcher = 'dl_move {}'

# don't timeout for during partially entered command
c.input.partial_timeout = 0

# ** Search Keywords
c.url.searchengines = \
    {'DEFAULT': 'https://duckduckgo.com/?kam=google-maps&kp=-2&q={}',
     'am': "https://www.amazon.in/s?k={}",
     'az': 'https://search.azlyrics.com/search.php?q={}',
     'gh': 'https://github.com/search?q={}',
     'sp': 'https://www.startpage.com/do/search?query={}&prfe=36c84513558a2d34bf0d89ea505333ad25eaad7546bb0b480adc2e9be9271a9b54b2adb3b1f304d3530bea21aa54bdf5',  # noqa: E501
     'yt': 'https://www.youtube.com/results?search_query={}',
     'wi': 'https://en.wikipedia.org/wiki/Special:Search?go=Go&search={}',
     'fl': 'https://www.flipkart.com/search?q={}',
     'os': 'https://wiki.osdev.org/index.php?title=Special%3ASearch&search={}',
     'go': 'https://www.google.com/search?q={}',
     'ma': 'https://www.google.com/maps/search/{}',
     'dol': 'https://www.oanda.com/currency-converter/en/?from=USD&to=INR&amount={}',
     'aur': 'https://aur.archlinux.org/packages?O=0&K={}',
     'aw': 'https://wiki.archlinux.org/index.php?search={}',
     'af': 'https://bbs.archlinux.org/search.php?action=search&keywords={}',
     'in': 'https://dir.indiamart.com/search.mp?ss={}',
    }

# ** Media
c.content.autoplay = False

# **Zoom default settings
# c.zoom.default = 75 
c.zoom.default = 100

# **Dark Mode
# config.set("colors.webpage.darkmode.enabled",True)
# config.set("colors.webpage.darkmode.algorithm",'lightness-hsl')
# config.set("colors.webpage.darkmode.contrast",-.022)
# config.set("colors.webpage.darkmode.threshold.text",150)
# config.set("colors.webpage.darkmode.threshold.background",100)
# config.set("colors.webpage.darkmode.policy.images",'always')
# config.set("colors.webpage.darkmode.grayscale.images",0.35)

# * Key Bindings

# ** Adblock update
nmap('au', 'adblock-update')
# ** Reload Configuration
nmap('t.', 'config-source')

# ** Toggle status and title bars
nmap('xb','config-cycle statusbar.show always never')
nmap('xt','config-cycle tabs.show always never')
nmap('xx','config-cycle statusbar.show always never ;; config-cycle tabs.show always never')

# ** Movement controls
nmap('j', 'scroll-page 0 0.2')
nmap('k', 'scroll-page 0 -0.2')
nmap('h', 'scroll-page -0.2 0')
nmap('l', 'scroll-page 0.2 0')
nmap('H', 'back')
nmap('L', 'forward')
nmap('J', 'tab-prev')
nmap('K', 'tab-next')
nmap('n', 'search-next')
nmap('N', 'search-prev')

# open homepage in new tab
nmap('tt', 'open --tab')

# open new private window
nmap('tp', 'open -p')

#Reopen closed windows
nmap('U', ':undo --window')

# swap o and O behaviour
nmap('o', 'cmd-set-text -s :open --tab')
nmap('O', 'cmd-set-text -s :open')

#unmap d and make it dd
nunmap('d')
nmap('dd', 'tab-close')

# tn and te for tab moving
nmap('T', 'tab-move -')
nmap('Y', 'tab-move +')

# ** quickmarks and marks
nunmap("'")
# real quickmarks
nmap("'T", ':open --tab https://web.telegram.org/a/')
nmap("'G", ':open --tab https://chat.openai.com/#')
nmap("'B", ':open --tab https://bard.google.com/u/2/')
nmap("'W", ':open --tab https://web.whatsapp.com/')
nmap("'gh", ':open --tab https://www.github.com/')
nmap("'gt", ':open --tab https://www.github.com/Typeaway14')
nmap("'Y", ':open --tab https://youtube.com/')
nmap("'S", ':open --tab https://www.speedtest.net/')
nmap("'mh", ':open --tab https://mail.google.com/mail/u/0/#inbox') #personal mail
nmap("'ms", ':open --tab https://mail.google.com/mail/u/1/#inbox') #official mail
nmap("'mm", ':open --tab https://mail.google.com/mail/u/2/#inbox') #spam mail
nmap("'mM", ':open --tab https://mail.google.com/mail/u/3/#inbox') #MUNSoc mail
nmap("'mS", ':open --tab https://mail.google.com/mail/u/4/#inbox') #Student body
nmap("'dh", ':open --tab https://drive.google.com/drive/u/0/my-drive')#personal gdrive 
nmap("'ds", ':open --tab https://drive.google.com/drive/u/1/my-drive')#official gdrive 
nmap("'dm", ':open --tab https://drive.google.com/drive/u/2/my-drive')#spam gdrive     
nmap("'dM", ':open --tab https://drive.google.com/drive/u/3/my-drive')#MUNSoc gdrive   
nmap("'dS", ':open --tab https://drive.google.com/drive/u/4/my-drive')#spam gdrive     
nmap("'cS", ':open --tab https://calendar.google.com/calendar/u/4')#spam gdrive     
nmap("'os", ':open --tab https://pages.cs.wisc.edu/~remzi/OSTEP/')#spam gdrive     
nmap("'O", ':open --tab https://onedrive.live.com/?id=root&cid=6FDBE9CD04F66FD1')
nmap("'P", ':open --tab https://www.pesuacademy.com/Academy/')
nmap("'M", ':open --tab https://monkeytype.com/')
nmap("'C", ':open --tab https://www.canva.com/')

# ** Zooming
nmap('+', 'zoom-in')
nmap('-', 'zoom-out')

##Youtube Adblocking##
def filter_yt(info: interceptor.Request):
    """Block the given request if necessary."""
    url = info.request_url
    if (
        url.host() == "www.youtube.com"
        and url.path() == "/get_video_info"
        and "&adformat=" in url.query()
    ):
        info.block()


interceptor.register(filter_yt)
